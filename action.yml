name: 'Patched GenerateDocstring'
description: 'Automatically document methods in your code by generating docstrings'
branding:
  icon: 'file-text'
  color: 'purple'
author: '@patched-codes'

inputs:
  github_token:
    description: 'GitHub token for creating pull requests'
    required: false
    default: ${{ github.token }}
  openai_api_key:
    description: 'OpenAI API key for the LLM'
    required: false
  patched_api_key:
    description: 'Patched API key for using Patched services'
    required: false
  base_path:
    description: 'Base path to start generating docstrings from'
    required: false
    default: '.'
  model:
    description: 'LLM model to use'
    required: false
  client_base_url:
    description: 'Base URL for the LLM API'
    required: false
  rewrite_existing:
    description: 'Whether to rewrite existing docstrings'
    required: false
  branch_prefix:
    description: 'Prefix for the created branch'
    required: false
    default: 'patched-generate-docstring/'
  disable_branch:
    description: 'Disable creating new branches'
    required: false
  disable_pr:
    description: 'Disable creating pull requests'
    required: false
  force_pr_creation:
    description: 'Force push commits to existing PR'
    required: false
  model_temperature:
    description: 'Temperature parameter for the LLM'
    required: false
  model_top_p:
    description: 'Top-p parameter for the LLM'
    required: false
  model_max_tokens:
    description: 'Maximum tokens for the LLM response'
    required: false

outputs:
  pr_url:
    description: 'URL of the created pull request'
    value: ${{ steps.generate-docstring.outputs.pr_url }}

runs:
  using: 'composite'
  steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Restore pip cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-patchwork-cli
        restore-keys: |
          ${{ runner.os }}-pip-patchwork-cli

    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install patchwork-cli

    - name: Generate config
      shell: bash
      run: |
        cat > config.yml << EOF
        github_api_key: "${{ inputs.github_token }}"
        $([ -n "${{ inputs.openai_api_key }}" ] && echo "openai_api_key: \"${{ inputs.openai_api_key }}\"")
        $([ -n "${{ inputs.patched_api_key }}" ] && echo "patched_api_key: \"${{ inputs.patched_api_key }}\"")
        $([ -n "${{ inputs.base_path }}" ] && echo "base_path: \"${{ inputs.base_path }}\"")
        $([ -n "${{ inputs.model }}" ] && echo "model: \"${{ inputs.model }}\"")
        $([ -n "${{ inputs.client_base_url }}" ] && echo "client_base_url: \"${{ inputs.client_base_url }}\"")
        $([ -n "${{ inputs.rewrite_existing }}" ] && echo "rewrite_existing: ${{ inputs.rewrite_existing }}")
        $([ -n "${{ inputs.branch_prefix }}" ] && echo "branch_prefix: \"${{ inputs.branch_prefix }}\"")
        $([ -n "${{ inputs.disable_branch }}" ] && echo "disable_branch: ${{ inputs.disable_branch }}")
        $([ -n "${{ inputs.disable_pr }}" ] && echo "disable_pr: ${{ inputs.disable_pr }}")
        $([ -n "${{ inputs.force_pr_creation }}" ] && echo "force_pr_creation: ${{ inputs.force_pr_creation }}")
        $([ -n "${{ inputs.model_temperature }}" ] && echo "model_temperature: ${{ inputs.model_temperature }}")
        $([ -n "${{ inputs.model_top_p }}" ] && echo "model_top_p: ${{ inputs.model_top_p }}")
        $([ -n "${{ inputs.model_max_tokens }}" ] && echo "model_max_tokens: ${{ inputs.model_max_tokens }}")
        EOF

    - name: Run GenerateDocstring
      id: generate-docstring
      shell: bash
      run: |
        patchwork GenerateDocstring --config config.yml
